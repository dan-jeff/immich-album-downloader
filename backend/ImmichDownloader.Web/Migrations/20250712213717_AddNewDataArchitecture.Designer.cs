// <auto-generated />
using System;
using ImmichDownloader.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImmichDownloader.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250712213717_AddNewDataArchitecture")]
    partial class AddNewDataArchitecture
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ImmichDownloader.Web.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AssetCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("asset_count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("ImmichId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("immich_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsShared")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_shared");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_synced");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<string>("OwnerName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_name");

                    b.Property<string>("SyncError")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_error");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("sync_status");

                    b.Property<string>("ThumbnailAssetId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("thumbnail_asset_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ImmichId")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("SyncStatus");

                    b.HasIndex("IsActive", "SyncStatus");

                    b.ToTable("albums", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.AlbumChunk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("album_id");

                    b.Property<byte[]>("ChunkData")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("chunk_data");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chunk_index");

                    b.Property<int>("ChunkSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chunk_size");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("DownloadedAlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("downloaded_album_id");

                    b.Property<int>("PhotoCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("photo_count");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("DownloadedAlbumId", "ChunkIndex")
                        .IsUnique();

                    b.ToTable("album_chunks", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("app_settings", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.BackgroundTask", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("AlbumId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("album_id");

                    b.Property<string>("AlbumName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("album_name");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrentStep")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("current_step");

                    b.Property<int?>("DownloadedAlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("downloaded_album_id");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProcessedCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("processed_count");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("profile_id");

                    b.Property<int>("Progress")
                        .HasColumnType("INTEGER")
                        .HasColumnName("progress");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("task_type");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total");

                    b.Property<byte[]>("ZipData")
                        .HasColumnType("BLOB")
                        .HasColumnName("zip_data");

                    b.Property<long>("ZipSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zip_size");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.HasIndex("TaskType");

                    b.ToTable("background_tasks", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.DownloadedAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("album_id");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("album_name");

                    b.Property<int>("ChunkCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chunk_count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImmichAlbumId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PhotoCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("photo_count");

                    b.Property<long>("TotalSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_size");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ImmichAlbumId");

                    b.ToTable("downloaded_albums", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.DownloadedAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("album_id");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("asset_id");

                    b.Property<int>("DownloadedAlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("downloaded_album_id");

                    b.Property<DateTime>("DownloadedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("downloaded_at");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("file_size");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("AssetId");

                    b.HasIndex("DownloadedAlbumId");

                    b.HasIndex("AssetId", "AlbumId")
                        .IsUnique();

                    b.ToTable("downloaded_assets", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Checksum")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("checksum");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("DownloadAttempts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("download_attempts");

                    b.Property<DateTime?>("DownloadedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("downloaded_at");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("file_path");

                    b.Property<long?>("FileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("file_size");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("file_type");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER")
                        .HasColumnName("height");

                    b.Property<string>("ImmichId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("immich_id");

                    b.Property<bool>("IsDownloaded")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_downloaded");

                    b.Property<DateTime?>("LastDownloadAttempt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_download_attempt");

                    b.Property<string>("OriginalFilename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("original_filename");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int?>("Width")
                        .HasColumnType("INTEGER")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("ImmichId")
                        .IsUnique();

                    b.HasIndex("IsDownloaded");

                    b.HasIndex("OriginalFilename");

                    b.HasIndex("IsDownloaded", "FileType");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.ImageAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedToAlbumAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("added_to_album_at");

                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("album_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("image_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<int?>("PositionInAlbum")
                        .HasColumnType("INTEGER")
                        .HasColumnName("position_in_album");

                    b.Property<DateTime?>("RemovedFromAlbumAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("removed_from_album_at");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("IsActive");

                    b.HasIndex("AlbumId", "IsActive");

                    b.HasIndex("ImageId", "AlbumId")
                        .IsUnique();

                    b.ToTable("image_albums", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.ImmichAlbum", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSynced")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_synced");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("PhotoCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("photo_count");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("immich_albums", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.ResizeJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("album_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("error_message");

                    b.Property<int>("FailedImages")
                        .HasColumnType("INTEGER")
                        .HasColumnName("failed_images");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("job_id");

                    b.Property<string>("OutputZipPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("output_zip_path");

                    b.Property<long?>("OutputZipSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("output_zip_size");

                    b.Property<int>("ProcessedImages")
                        .HasColumnType("INTEGER")
                        .HasColumnName("processed_images");

                    b.Property<int>("ResizeProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("resize_profile_id");

                    b.Property<int>("SkippedImages")
                        .HasColumnType("INTEGER")
                        .HasColumnName("skipped_images");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<int>("TotalImages")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_images");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.HasIndex("ResizeProfileId");

                    b.HasIndex("Status");

                    b.HasIndex("AlbumId", "ResizeProfileId");

                    b.ToTable("resize_jobs", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.ResizeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER")
                        .HasColumnName("height");

                    b.Property<bool>("IncludeHorizontal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("include_horizontal");

                    b.Property<bool>("IncludeVertical")
                        .HasColumnType("INTEGER")
                        .HasColumnName("include_vertical");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Quality")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.ToTable("resize_profiles", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.ResizedImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("completed_at");

                    b.Property<decimal?>("CompressionRatio")
                        .HasColumnType("TEXT")
                        .HasColumnName("compression_ratio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("error_message");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("file_size");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("format");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER")
                        .HasColumnName("height");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("image_id");

                    b.Property<long?>("ProcessingTimeMs")
                        .HasColumnType("INTEGER")
                        .HasColumnName("processing_time_ms");

                    b.Property<int>("Quality")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quality");

                    b.Property<int>("ResizeJobId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("resize_job_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("Format");

                    b.HasIndex("ResizeJobId");

                    b.HasIndex("Status");

                    b.HasIndex("ImageId", "ResizeJobId")
                        .IsUnique();

                    b.HasIndex("Status", "Format");

                    b.ToTable("resized_images", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.AlbumChunk", b =>
                {
                    b.HasOne("ImmichDownloader.Web.Models.DownloadedAlbum", "DownloadedAlbum")
                        .WithMany("Chunks")
                        .HasForeignKey("DownloadedAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DownloadedAlbum");
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.DownloadedAlbum", b =>
                {
                    b.HasOne("ImmichDownloader.Web.Models.ImmichAlbum", "ImmichAlbum")
                        .WithMany()
                        .HasForeignKey("ImmichAlbumId");

                    b.Navigation("ImmichAlbum");
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.DownloadedAsset", b =>
                {
                    b.HasOne("ImmichDownloader.Web.Models.DownloadedAlbum", "DownloadedAlbum")
                        .WithMany()
                        .HasForeignKey("DownloadedAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DownloadedAlbum");
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.ImageAlbum", b =>
                {
                    b.HasOne("ImmichDownloader.Web.Models.Album", "Album")
                        .WithMany("ImageAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImmichDownloader.Web.Models.Image", "Image")
                        .WithMany("ImageAlbums")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.ResizeJob", b =>
                {
                    b.HasOne("ImmichDownloader.Web.Models.Album", "Album")
                        .WithMany("ResizeJobs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ImmichDownloader.Web.Models.ResizeProfile", "ResizeProfile")
                        .WithMany()
                        .HasForeignKey("ResizeProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("ResizeProfile");
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.ResizedImage", b =>
                {
                    b.HasOne("ImmichDownloader.Web.Models.Image", "Image")
                        .WithMany("ResizedImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImmichDownloader.Web.Models.ResizeJob", "ResizeJob")
                        .WithMany("ResizedImages")
                        .HasForeignKey("ResizeJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("ResizeJob");
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.Album", b =>
                {
                    b.Navigation("ImageAlbums");

                    b.Navigation("ResizeJobs");
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.DownloadedAlbum", b =>
                {
                    b.Navigation("Chunks");
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.Image", b =>
                {
                    b.Navigation("ImageAlbums");

                    b.Navigation("ResizedImages");
                });

            modelBuilder.Entity("ImmichDownloader.Web.Models.ResizeJob", b =>
                {
                    b.Navigation("ResizedImages");
                });
#pragma warning restore 612, 618
        }
    }
}
